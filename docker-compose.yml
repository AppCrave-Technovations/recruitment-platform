version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: recruitment-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: recruitment_platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - recruitment-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/recruitment_platform --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: recruitment-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-5000}
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/recruitment_platform?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-50MB}
      UPLOAD_PATH: ${UPLOAD_PATH:-./uploads}
    ports:
      - "${PORT:-5000}:${PORT:-5000}"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - recruitment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Service (Optional microservice)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: recruitment-ai-service
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5001
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "5001:5001"
    networks:
      - recruitment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${FRONTEND_URL:-http://localhost:3000}/api
        REACT_APP_AI_SERVICE_URL: http://localhost:5001
    container_name: recruitment-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:${PORT:-5000}/api
      REACT_APP_AI_SERVICE_URL: http://localhost:5001
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - recruitment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7.2-alpine
    container_name: recruitment-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - recruitment-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  recruitment-network:
    driver: bridge